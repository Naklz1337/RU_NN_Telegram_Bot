#!/usr/bin/env python
# coding: utf-8
import json
import numpy as np
import pandas as pd
import keras
from keras.preprocessing.text import Tokenizer, text_to_word_sequence

del_symbols = '''!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n0123456789
üòÄüòÉüòÑüòÅüòÜüòÖüòÇü§£üòáüòâüòäüôÇüôÉ‚ò∫üòãüòåüòçü•∞üòòüòóüòôüòöü§™üòúüòù
üòõü§ëüòéü§ìüßêü§†ü•≥ü§óü§°üòèüò∂üòêüòëüòíüôÑü§®ü§îü§´ü§≠ü§•üò≥üòûüòüüò†üò°
ü§¨üòîüòïüôÅ‚òπüò¨ü•∫üò£üòñüò´üò©ü•±üò§üòÆüò±üò®üò∞üòØüò¶üòßüò¢üò•üò™ü§§üòì
üò≠ü§©üòµü•¥üò≤ü§Øü§êüò∑ü§ïü§íü§Æü§¢ü§ßü•µü•∂üò¥üí§üòàüëøüëπüë∫üí©üëªüíÄ‚ò†
üëΩü§ñüéÉüò∫üò∏üòπüòªüòºüòΩüôÄüòøüòæüëêü§≤üôåüëèüôèü§ùüëçüëéüëä‚úäü§õü§úü§û‚úå
ü§òü§üüëåü§èüëàüëâüëÜüëá‚òù‚úãü§öüñêüññüëãü§ôüí™ü¶æüñï‚úçü§≥üíÖü¶µü¶øü¶∂üëÑü¶∑üëÖüëÇ
ü¶ªüëÉüëÅüëÄüß†ü¶¥üë§üë•üó£üë∂üëßüßíüë¶üë©üßëüë®üë©‚Äçü¶±üßë‚Äçü¶±üë®‚Äçü¶±üë©‚Äçü¶∞üßë‚Äçü¶∞üë®‚Äçü¶∞üë±‚Äç‚ôÄÔ∏èüë±üë±‚Äç‚ôÇÔ∏è
üë©‚Äçü¶≥üßë‚Äçü¶≥üë®‚Äçü¶≥üë©‚Äçü¶≤üßë‚Äçü¶≤üë®‚Äçü¶≤üßîüëµüßìüë¥üë≤üë≥‚Äç‚ôÄÔ∏èüë≥üë≥‚Äç‚ôÇÔ∏èüßïüëºüë∏ü§¥üë∞ü§µ‚Äç‚ôÄÔ∏èü§µü§µ‚Äç‚ôÇÔ∏èüôá‚Äç‚ôÄÔ∏è
üôáüôá‚Äç‚ôÇÔ∏èüíÅ‚Äç‚ôÄÔ∏èüíÅüíÅ‚Äç‚ôÇÔ∏èüôÖ‚Äç‚ôÄÔ∏èüôÖüôÖ‚Äç‚ôÇÔ∏èüôÜ‚Äç‚ôÄÔ∏èüôÜüôÜ‚Äç‚ôÇÔ∏èü§∑‚Äç‚ôÄÔ∏èü§∑ü§∑‚Äç‚ôÇÔ∏èüôã‚Äç‚ôÄÔ∏èüôãüôã‚Äç‚ôÇÔ∏èü§¶‚Äç‚ôÄÔ∏èü§¶ü§¶‚Äç‚ôÇÔ∏èüßè‚Äç‚ôÄÔ∏èüßèüßè‚Äç‚ôÇÔ∏èüôé‚Äç‚ôÄÔ∏èüôéüôé‚Äç‚ôÇÔ∏è
üôç‚Äç‚ôÄÔ∏èüôçüôç‚Äç‚ôÇÔ∏èüíá‚Äç‚ôÄÔ∏èüíáüíá‚Äç‚ôÇÔ∏èüíÜ‚Äç‚ôÄÔ∏èüíÜüíÜ‚Äç‚ôÇÔ∏èü§∞ü§±üßé‚Äç‚ôÄÔ∏èüßéüßé‚Äç‚ôÇÔ∏èüßç‚Äç‚ôÄÔ∏èüßçüßç‚Äç‚ôÇÔ∏èüö∂‚Äç‚ôÄÔ∏èüö∂üö∂‚Äç‚ôÇÔ∏èüë©‚Äçü¶Øüßë‚Äçü¶Øüë®‚Äçü¶ØüèÉ‚Äç‚ôÄÔ∏èüèÉüèÉ‚Äç‚ôÇÔ∏èüë©‚Äçü¶ºüßë‚Äçü¶ºüë®‚Äçü¶º
üë©‚Äçü¶Ωüßë‚Äçü¶Ωüë®‚Äçü¶ΩüíÉüï∫üë´üßë‚Äçü§ù‚Äçüßëüë©‚Äç‚ù§Ô∏è‚Äçüë®üíëüë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®üíè‚ù§üß°üíõüíöüíôüíúü§éüñ§ü§çüíî‚ù£üíïüíûüíìüíó
üíñüíòüíùüíüüê∂üê±üê≠üêπüê∞üêªüß∏üêºüê®üêØü¶ÅüêÆüê∑üêΩüê∏üêµüôàüôâüôäüêíü¶ç
ü¶ßüêîüêßüê¶üê§üê£üê•üê∫ü¶äü¶ùüêóüê¥ü¶ìü¶íü¶åü¶òü¶•ü¶¶ü¶Ñüêùüêõü¶ãüêåüêûüêúü¶ó
üï∑üï∏ü¶Çü¶üü¶†üê¢üêçü¶éüêôü¶ëü¶ûü¶Äü¶êü¶™üê†üêüüê°üê¨ü¶àüê≥üêãüêäüêÜüêÖüêÉüêÇ
üêÑüê™üê´ü¶ôüêòü¶èü¶õüêêüêèüêëüêéüêñü¶áüêìü¶Éüïäü¶Öü¶Üü¶¢ü¶âü¶©ü¶öü¶úüêïü¶Æüêï‚Äçü¶∫
üê©üêàüêáüêÄüêÅüêøü¶®ü¶°ü¶îüêæüêâüê≤ü¶ïü¶ñüåµüéÑüå≤üå≥üå¥üå±üåø‚òòüçÄüéçüéãüçÉüçÇ
üçÅüåæüå∫üåªüåπü•Äüå∑üåºüå∏üíêüçÑüå∞üêöüåéüåçüåèüåïüåñüåóüåòüåëüåíüåìüåîüåôüåö
üåùüåõüåú‚≠êüåüüí´‚ú®‚òÑü™êüåû‚òÄüå§‚õÖüå•üå¶‚òÅüåß‚õàüå©‚ö°üî•üí•‚ùÑüå®‚òÉ‚õÑüå¨üí®üå™üå´üåà
‚òîüíßüí¶üåäüçèüçéüçêüçäüçãüçåüçâüçáüçìüçàüçíüçëü•≠üççü••ü•ùüçÖü•ëüçÜüå∂ü•íü•¨ü•¶
üßÑüßÖüåΩü•ïü•óü•îüç†ü•úüçØüçûü•êü•ñü•®ü•Øü•ûüßáüßÄüçóüçñü•©üç§ü•öüç≥ü•ìüçîüçü
üå≠üçïüçùü•™üåÆüåØü•ôüßÜüçúü•òüç≤ü•´üßÇüßàüç•üç£üç±üçõüçôüçöüçòü•üüç¢üç°üçßüç®üç¶
üç∞üéÇüßÅü•ßüçÆüç≠üç¨üç´üçøüç©üç™ü•†ü•Æ‚òïüçµü•£üçºü•§üßÉüßâü•õüç∫üçªüç∑ü•Çü•Éüç∏üçπ
üçæüç∂üßäü•Ñüç¥üçΩü•¢ü•°‚öΩüèÄüèà‚öæü•éüéæüèêüèâüé±ü•èüèìüè∏ü•Öüèíüèëüèèü•çü•å
‚õ≥üèπüé£ü§øü•äü•ã‚õ∏üéøüõ∑‚õ∑üèÇüèãÔ∏è‚Äç‚ôÄÔ∏èüèãüèãÔ∏è‚Äç‚ôÇÔ∏èü§∫ü§º‚Äç‚ôÄÔ∏èü§ºü§º‚Äç‚ôÇÔ∏èü§∏‚Äç‚ôÄÔ∏èü§∏ü§∏‚Äç‚ôÇÔ∏è‚õπÔ∏è‚Äç‚ôÄÔ∏è‚õπ‚õπÔ∏è‚Äç‚ôÇÔ∏èü§æ‚Äç‚ôÄÔ∏èü§æü§æ‚Äç‚ôÇÔ∏è
üßó‚Äç‚ôÄÔ∏èüßóüßó‚Äç‚ôÇÔ∏èüèåÔ∏è‚Äç‚ôÄÔ∏èüèåüèåÔ∏è‚Äç‚ôÇÔ∏èüßò‚Äç‚ôÄÔ∏èüßòüßò‚Äç‚ôÇÔ∏èüßñ‚Äç‚ôÄÔ∏èüßñüßñ‚Äç‚ôÇÔ∏èüèÑ‚Äç‚ôÄÔ∏èüèÑüèÑ‚Äç‚ôÇÔ∏èüèä‚Äç‚ôÄÔ∏èüèäüèä‚Äç‚ôÇÔ∏èü§Ω‚Äç‚ôÄÔ∏èü§Ωü§Ω‚Äç‚ôÇÔ∏èüö£‚Äç‚ôÄÔ∏èüö£üö£‚Äç‚ôÇÔ∏èüèáüö¥‚Äç‚ôÄÔ∏èüö¥
üö¥‚Äç‚ôÇÔ∏èüöµ‚Äç‚ôÄÔ∏èüöµüöµ‚Äç‚ôÇÔ∏èüéΩüéñüèÖü•áü•àü•âüèÜüèµüéóüé´üéüüé™ü§π‚Äç‚ôÄÔ∏èü§πü§π‚Äç‚ôÇÔ∏èüé≠üé®üé¨üé§üéßüéºüéπü•Åüé∑
üé∫üé∏ü™ïüéªüé≤üß©‚ôüüéØüé≥ü™Äü™ÅüéÆüëæüé∞üëÆ‚Äç‚ôÄÔ∏èüëÆüëÆ‚Äç‚ôÇÔ∏èüë©‚Äçüöíüßë‚Äçüöíüë®‚Äçüöíüë∑‚Äç‚ôÄÔ∏èüë∑üë∑‚Äç‚ôÇÔ∏èüë©‚Äçüè≠üßë‚Äçüè≠üë®‚Äçüè≠
üë©‚Äçüîßüßë‚Äçüîßüë®‚Äçüîßüë©‚Äçüåæüßë‚Äçüåæüë®‚Äçüåæüë©‚Äçüç≥üßë‚Äçüç≥üë®‚Äçüç≥üë©‚Äçüé§üßë‚Äçüé§üë®‚Äçüé§üë©‚Äçüé®üßë‚Äçüé®üë®‚Äçüé®üë©‚Äçüè´üßë‚Äçüè´üë®‚Äçüè´üë©‚Äçüéìüßë‚Äçüéì
üë®‚Äçüéìüë©‚Äçüíºüßë‚Äçüíºüë®‚Äçüíºüë©‚Äçüíªüßë‚Äçüíªüë®‚Äçüíªüë©‚Äçüî¨üßë‚Äçüî¨üë®‚Äçüî¨üë©‚ÄçüöÄüßë‚ÄçüöÄüë®‚ÄçüöÄüë©‚Äç‚öïÔ∏èüßë‚Äç‚öïÔ∏èüë®‚Äç‚öïÔ∏èüë©‚Äç‚öñÔ∏èüßë‚Äç‚öñÔ∏èüë®‚Äç‚öñÔ∏èüë©‚Äç‚úàÔ∏èüßë‚Äç‚úàÔ∏è
üë®‚Äç‚úàÔ∏èüíÇ‚Äç‚ôÄÔ∏èüíÇüíÇ‚Äç‚ôÇÔ∏èüïµÔ∏è‚Äç‚ôÄÔ∏èüïµüïµÔ∏è‚Äç‚ôÇÔ∏èü§∂üéÖüï¥Ô∏è‚Äç‚ôÄÔ∏èüï¥üï¥Ô∏è‚Äç‚ôÇÔ∏èü¶∏‚Äç‚ôÄÔ∏èü¶∏ü¶∏‚Äç‚ôÇÔ∏èü¶π‚Äç‚ôÄÔ∏èü¶πü¶π‚Äç‚ôÇÔ∏èüßô‚Äç‚ôÄÔ∏èüßôüßô‚Äç‚ôÇÔ∏èüßù‚Äç‚ôÄÔ∏èüßùüßù‚Äç‚ôÇÔ∏èüßö‚Äç‚ôÄÔ∏èüßöüßö‚Äç‚ôÇÔ∏èüßû‚Äç‚ôÄÔ∏è
üßûüßû‚Äç‚ôÇÔ∏èüßú‚Äç‚ôÄÔ∏èüßúüßú‚Äç‚ôÇÔ∏èüßõ‚Äç‚ôÄÔ∏èüßõüßõ‚Äç‚ôÇÔ∏èüßü‚Äç‚ôÄÔ∏èüßüüßü‚Äç‚ôÇÔ∏èüëØ‚Äç‚ôÄÔ∏èüëØüëØ‚Äç‚ôÇÔ∏èüë™üë®‚Äçüë©‚Äçüëßüë®‚Äçüë©‚Äçüëß‚Äçüë¶üë®‚Äçüë©‚Äçüë¶‚Äçüë¶üë®‚Äçüë©‚Äçüëß‚Äçüëßüë©‚Äçüë¶üë©‚Äçüëßüë©‚Äçüëß‚Äçüë¶üë©‚Äçüë¶‚Äçüë¶üë©‚Äçüëß‚Äçüëßüë®‚Äçüë¶üë®‚Äçüëß
üë®‚Äçüëß‚Äçüë¶üë®‚Äçüë¶‚Äçüë¶üë®‚Äçüëß‚Äçüëßüöóüöôüöïüõ∫üöåüöéüèéüöìüöëüöíüöêüööüöõüöúüèçüõµüö≤ü¶ºü¶Ωüõ¥üõπüö®üöî
üöçüöòüöñüö°üö†üöüüöÉüöãüöùüöÑüöÖüöàüöûüöÇüöÜüöáüöäüöâüöÅüõ©‚úàüõ´üõ¨ü™Çüí∫üõ∞üöÄ
üõ∏üõ∂‚õµüõ•üö§‚õ¥üõ≥üö¢‚öì‚õΩüößüöèüö¶üö•üõëüé°üé¢üé†üèóüåÅüóºüè≠‚õ≤üéë‚õ∞üèîüóªüåã
üóæüèï‚õ∫üèûüõ£üõ§üåÖüåÑüèúüèñüèùüåáüåÜüèôüåÉüåâüååüå†üéáüéÜüèòüè∞üèØüèüüóΩüè†üè°üèöüè¢
üè¨üè£üè§üè•üè¶üè®üè™üè´üè©üííüèõ‚õ™üïåüõïüïçüïã‚õ©‚åöüì±üì≤üíª‚å®üñ•üñ®üñ±üñ≤üïπüóúüíΩ
üíæüíøüìÄüìºüì∑üì∏üìπüé•üìΩüéûüìû‚òéüìüüì†üì∫üìªüéôüéöüéõ‚è±‚è≤‚è∞üï∞‚è≥‚åõüßÆüì°üîãüîåüí°
üî¶üïØüßØüóëüõ¢üõíüí∏üíµüí¥üí∂üí∑üí∞üí≥üßæüíé‚öñü¶Øüß∞üîßüî®‚öíüõ†‚õèü™ìüî©‚öô‚õìüß±üî´üß®
üí£üî™üó°‚öîüõ°üö¨‚ö∞‚ö±üè∫üîÆüìøüßøüíàüß≤‚öóüß™üß´üß¨üî≠üî¨üï≥üíäüíâü©∏ü©πü©∫üå°üè∑üîñüöΩ
üöøüõÅüõÄü™íüß¥üßªüßºüßΩüßπüß∫üîëüóùüõãü™ëüõåüõèüö™üß≥üõéüñºüß≠üó∫‚õ±üóøüõçüéàüéèüéÄüßß
üéÅüéäüéâüééüéêüèÆü™î‚úâüì©üì®üìßüíåüìÆüì™üì´üì¨üì≠üì¶üìØüì•üì§üìúüìÉüìëüìäüìàüìâ
üìÑüìÖüìÜüóìüìáüóÉüó≥üóÑüìãüóíüìÅüìÇüóÇüóûüì∞üììüìïüìóüìòüìôüìîüìíüìöüìñüîóüìéüñá‚úÇüìêüìèüìå
üìçüß∑üßµüß∂üîêüîíüîìüîèüñäüñã‚úíüìù‚úèüñçüñåüîçüîéüëöüëïü•ºü¶∫üß•üëñüëîüëóüëòü•ªü©±üëôü©≤
ü©≥üíÑüíãüë£üß¶üë†üë°üë¢ü•øüëûüëüü©∞ü•æüß¢üëíüé©üéìüëë‚õëüéíüëùüëõüëúüíºüëìüï∂ü•Ω
üß£üß§üíçüåÇ‚òÇ‚òÆ‚úù‚ò™üïâ‚ò∏‚ú°üîØüïé‚òØ‚ò¶üõê‚õé‚ôà‚ôâ‚ôä‚ôã‚ôå‚ôç‚ôé‚ôè‚ôê‚ôë‚ôí‚ôìüÜî
‚öõ‚öï‚ò¢‚ò£üì¥üì≥üà∂üàöüà∏üà∫üà∑‚ú¥üÜöüâëüíÆüâê„äô„äóüà¥üàµüàπüà≤üÖ∞üÖ±üÜéüÜëüÖæüÜò‚õî
üìõüö´‚ùå‚≠ïüí¢‚ô®üö∑üöØüö≥üö±üîûüìµüö≠‚ùó‚ùï‚ùì‚ùî‚Äº‚ÅâüíØüîÖüîÜüî±‚öú„ÄΩ‚ö†üö∏üî∞‚ôªüàØüíπ
‚ùá‚ú≥‚ùé‚úÖüí†üåÄ‚ûøüåê‚ôæ‚ìÇüèßüöæ‚ôøüÖøüà≥üàÇüõÇüõÉüõÑüõÖüö∞üöπ‚ôÇüö∫‚ôÄ‚ößüöºüöªüöÆüé¶
üì∂üàÅüÜñüÜóüÜôüÜíüÜïüÜì0‚É£1‚É£2‚É£3‚É£4‚É£5‚É£6‚É£7‚É£8‚É£9‚É£üîüüî¢‚ñ∂‚è∏‚èØ‚èπ‚è∫‚èè‚è≠‚èÆ
‚è©‚è™üîÄüîÅüîÇ‚óÄüîºüîΩ‚è´‚è¨‚û°‚¨Ö‚¨Ü‚¨á‚Üó‚Üò‚Üô‚Üñ‚Üï‚ÜîüîÑ‚Ü™‚Ü©üîÉ‚§¥‚§µ#‚É£*‚É£‚Ñπüî§üî°üî†üî£
üéµüé∂„Ä∞‚û∞‚úî‚ûï‚ûñ‚ûó‚úñüí≤üí±¬©¬Æ‚Ñ¢üîöüîôüîõüîùüîú‚òëüîòüî¥üü†üü°üü¢üîµüü£üü§‚ö´
‚ö™üü•üüßüü®üü©üü¶üü™üü´‚¨õ‚¨ú‚óº‚óª‚óæ‚óΩ‚ñ™‚ñ´üî∏üîπüî∂üî∑üî∫üîªüî≤üî≥üîàüîâüîäüîáüì£
üì¢üîîüîïüÉèüÄÑ‚ô†‚ô£‚ô•‚ô¶üé¥üëÅ‚Äçüó®üó®üí≠üóØüí¨üïêüïëüïíüïìüïîüïïüïñüïóüïòüïôüïöüïõüïúüïù
üïûüïüüï†üï°üï¢üï£üï§üï•üï¶üïß'''


with open(r'save_models\input_word_index.json', 'r') as f:
    input_word_index = json.load(f)
input_index_word = dict(zip(input_word_index.values(), input_word_index.keys()))
    
with open(r'save_models\output_word_index.json', 'r') as f:
    output_word_index = json.load(f)
output_index_word = dict(zip(output_word_index.values(), output_word_index.keys()))

input_vocabulary = np.load(r'save_models\input_vocab.npy')
output_vocabulary = np.load(r'save_models\output_vocab.npy')

input_model = keras.models.load_model(r'save_models\input_model.h5')
encoder_model = keras.models.load_model(r'save_models\encoder_model.h5', compile=False)
decoder_model = keras.models.load_model(r'save_models\decoder_model.h5', compile=False)

input_vocab_size = len(input_vocabulary)
output_vocab_size = len(output_vocabulary)

start_token = '\t'
stop_token = '\n'

max_encoder_seq_lenght = 11
max_decoder_seq_lenght = 13

def decode_sequence(input_seq):
    thought = encoder_model.predict(input_seq)#–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä –∏–¥–µ–∏(–≤—Ö–æ–¥–Ω–æ–π —Å–∏–≥–Ω–∞–ª)
    
    output_seq = np.zeros((1, 1, output_vocab_size))
    output_seq[0, 0, output_word_index[start_token]] = 1# –∑–∞–¥–∞–µ–º –Ω–∞—á–∞–ª–∞ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤—â–∏–∫–∞
    
    stop_condition = False
    generated_sequence = ''
    
    while not stop_condition:
        output_tokens, h, c = decoder_model.predict(
        [output_seq] + thought)
        
        generated_token_idx = np.argmax(output_tokens[0, -1, :])
        generated_word = output_index_word[generated_token_idx]
        generated_sequence += generated_word + ' '
        
        if(generated_word == stop_token or 
           len(generated_sequence) > max_decoder_seq_lenght):
            stop_condition = True
 
        output_seq = np.zeros((1,1, output_vocab_size))
        output_seq[0, 0,  generated_token_idx] += 1
        thought = [h, c]
    return generated_sequence

def word_find(word, dictionary):
    """–ø–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ–≥–æ —Å–ª–æ–≤–∞"""
    g = []
    for word_true in dictionary:
        word_table = np.zeros((len(word_true), len(word)))
        for num_i, i in enumerate(word_true):
            for num_j, j in enumerate (word):
                if i==j:
                    word_table[num_i][num_j] = 1+ word_table[num_i-1][num_j-1]
        time = np.sum(word_table)/((len(word_true)+len(word))/2)
        g.append(time)
        arg = np.argmax(g)
        
    return input_vocabulary[arg], arg 

def response(input_text):
    input_seq = np.zeros((1, max_encoder_seq_lenght, input_vocab_size), dtype=np.float32)
    text = text_to_word_sequence(input_text, filters = del_symbols)

    for t, word in enumerate(text):
        try:
            input_seq[0, t, input_word_index[word]] += 1
        except KeyError:
            o, num = word_find(word, input_word_index)
            print(o, num, input_word_index[o])
            input_seq[0, t, num] += 1
            
    decoded_sentence = decode_sequence(input_seq)
    return decoded_sentence

if __name__ == '__main__':
    response('–ø—Ä–∏–≤–µ—Ç')